import os
import requests
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# Load environment variables from .env file
load_dotenv()

# Set logging level to WARNING
logging.basicConfig(level=logging.WARNING)

# Initialize Telegram bot and dispatcher
bot = Bot(token=os.environ['TELEGRAM_API_TOKEN'])
dp = Dispatcher(bot)

# Binance endpoint for getting the price of a specific cryptocurrency
binance_api_endpoint = 'https://api.binance.com/api/v3/ticker/price'

# Define a function to get the price of a cryptocurrency from Binance


def get_crypto_price(symbol):
    try:
        params = {'symbol': symbol}
        headers = {'X-MBX-APIKEY': os.environ['BINANCE_API_KEY']}
        response = requests.get(binance_api_endpoint,
                                params=params, headers=headers)
        response.raise_for_status()
        price = response.json()['price']
        return price
    except requests.exceptions.HTTPError as e:
        logging.warning(
            f'Binance API –≤–µ—Ä–Ω—É–ª {e.response.status_code} {e.response.reason}: {e.response.text}')
        return None
    except Exception as e:
        logging.warning(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {str(e)}')
        return None

# Define a handler for the /start command


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ Binance. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /price –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /price BTCUSDT), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É. üòä")

# Define a handler for the /price command


@dp.message_handler(commands=['price'])
async def price_command(message: types.Message):
    try:
        symbol = message.text.split()[1].upper()
        price = get_crypto_price(symbol)
        if price is not None:
            await message.reply(f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol} - {price} USDT. üöÄ')
        else:
            await message.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòï')
    except:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /price. üòï')

# Start the bot
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
